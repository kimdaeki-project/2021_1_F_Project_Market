<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mm.market.social.SocialMapper">

	<select id="getList" resultMap="selectResult" parameterType="SocialPager">
		select S.*, SC.*, M.*, L.*, 
		<!-- 댓글 숫자 표시 -->
		(select count(*) from comment where socialNum = S.socialNum) commentCount
		from social S
		inner join socialCategory SC
		on S.categoryCode = SC.categoryCode
		inner join member M
		on S.username = M.username
		inner join location L
		on S.locationCode = L.locationCode
		where
		<if test="categoryCode != 0L">
			S.categoryCode=#{categoryCode} and
		</if>
		<if test="locationCode != 0L">
			S.locationCode = #{locationCode} and
		</if>
		<if test="username != null">
			S.username = #{username} and
		</if>
		<choose>
			<when test="kind == 'writer'">
				S.username in (select username from member where name like concat ('%', #{search}, '%'))
			</when>
			<when test="kind == 'content'">
				S.socialContent like concat ('%', #{search}, '%')
			</when>
			<otherwise>
				S.socialTitle like concat ('%', #{search}, '%')
			</otherwise>
		</choose>
		order by S.socialNum desc
		limit #{startRow}, #{perPage}
	</select>

	<select id="getSelect" resultMap="selectResult" parameterType="SocialVO">
		select S.*, SC.*, M.*, MF.*, L.*, 
		(select count(*) from comment where socialNum = S.socialNum) commentCount
		from social S
		inner join socialCategory SC
		on S.categoryCode = SC.categoryCode
		inner join member M
		on S.username = M.username
		inner join memberFile MF
		on S.username = MF.username
		inner join location L
		on S.locationCode = L.locationCode
		where S.socialNum = #{socialNum}
	</select>

	<resultMap type="SocialVO" id="selectResult">
		<id column="socialNum" property="socialNum"></id>
		<result column="socialTitle" property="socialTitle" />
		<result column="categoryCode" property="categoryCode" />
		<result column="username" property="username" />
		<result column="socialContent" property="socialContent" />
		<result column="socialDate" property="socialDate" />
		<result column="socialGood" property="socialGood" />
		<result column="locationCode" property="locationCode" />
		<result column="commentCount" property="commentCount" />
		<association property="socialCategory" javaType="SocialCategoryVO">
			<id property="categoryCode" column="categoryCode" />
			<result property="categoryName" column="categoryName" />
		</association>
		<association property="location" javaType="LocationVO">
			<id property="locationCode" column="locationCode" />
			<result property="locationName" column="locationName" />
		</association>
		<association property="writer" javaType="MemberVO">
			<id property="username" column="username" />
			<result property="name" column="name" />
			<result property="code" column="code"/>
		</association>
		<association property="writerFile" javaType="MemberFileVO">
			<id property="fileNum" column="fileNum" />
			<result property="username" column="username"/>
			<result property="fileName" column="fileName"/>
		</association>
		<collection property="goods" javaType="GoodVO">
			<id column="goodNum" property="goodNum"/>
			<result column="socialNum" property="socialNum"/>
			<result column="username" property="username"/>
		</collection>
	</resultMap>

	<select id="getSocialNum" resultType="Long">
		select last_insert_id()
	</select>

	<select id="getTotalCount" resultType="Long" parameterType="SocialPager">
		select count(socialNum) from social
		where
				<if test="categoryCode != 0L">
					categoryCode = #{categoryCode} and 
				</if>
				<if test="locationCode != 0L">
					locationCode = #{locationCode} and
				</if>
				<if test="username != null">
					username = #{username} and
				</if>
				<choose>
					<when test="kind == 'writer'">
						username in (select username from member where name like concat ('%', #{search}, '%'))
					</when>
					<when test="kind == 'content'">
						socialContent like concat ('%', #{search}, '%')
					</when>
					<otherwise>
						socialTitle like concat ('%', #{search}, '%')
					</otherwise>
				</choose>
		and socialNum > 0
	</select>

	<insert id="setInsert" parameterType="SocialVO" useGeneratedKeys="true" keyProperty="socialNum">
		insert into social(socialNum, socialTitle, categoryCode, username, socialContent, socialDate, locationCode)
		values (#{socialNum}, #{socialTitle}, #{categoryCode}, #{username},	#{socialContent}, now(), #{locationCode})
	</insert>

	<update id="setUpdate" parameterType="SocialVO">
		update social set
		socialTitle = #{socialTitle},
		categoryCode = #{categoryCode},
		socialContent = #{socialContent}
		where socialNum = #{socialNum}
	</update>

	<delete id="setDelete" parameterType="SocialVO">
		delete from social where socialNum = #{socialNum}
	</delete>

	<!-- good -->
	<select id="getGood" parameterType="GoodVO" resultType="Long">
		select count(goodNum) from good
		where socialNum=#{socialNum} and username=#{username}
	</select>

	<insert id="insertGood" parameterType="GoodVO">
		insert into good
		(socialNum, username)
		values (#{socialNum}, #{username})
	</insert>

	<select id="updateGood" parameterType="GoodVO">
		update social set socialGood = (select count(*) from good
		where socialNum = #{socialNum}) where socialNum = #{socialNum}
	</select>
	
	<delete id="deleteGood" parameterType="GoodVO">
		delete from good where socialNum = #{socialNum} and username = #{username}
	</delete>

	<select id="getGoodList" parameterType="SocialPager" resultMap="selectResult">
		select G.*, S.*, L.*
		from good G
		left Join social S
		on S.socialNum = G.socialNum 
		inner Join location L 
		on S.locationCode = L.locationCode
		where G.username = #{username}
	</select>
</mapper>